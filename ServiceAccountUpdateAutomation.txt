$style="<style type=""text/css"" >
TABLE {border-width: 1px;border-style: solid;border-color: black;border-collapse: collapse;margin-left:auto;margin-right:auto;}
TH {border-width: 1px;padding: 3px;border-style: solid;border-color: black;background-color:#bb02ff;color:blue}
h2{text-align:center;color;blue;background-color:#d60a3a;}
TD {border-width: 1px;padding: 3px;border-style: solid;border-color: black;}

.Stopped{background-color:#ff5f38;}
.Running{background-color:#81f999;}
</style>"

$header="<!DOCTYPE html>
<html>
    <head>$style</head>
    <body>
        <h2 ><u>Service Ac update Status</u></h2>"
$footer=" </body>
     
</html>"

# Prompt the user for the username and password
$cred = Get-Credential -Message "Enter new username and password"

# Define the list of servers
$servers = Get-Content "C:\Scripts\Allservers.txt"

# Define the list of services and the start sequence
$services = @("NexidiaConfig","NexidiaBackgroundWorker","NexidiaDataCompliance","NexidiaDiscovery","NexidiaEvaluationsAging","NexidiaIngest","NexidiaReplay","NexidiaSearch","NxGridGateway","NxGridControl","NxGridBase","NxGridAgent")
$startSequence = @("NexidiaConfig","NexidiaBackgroundWorker","NexidiaDataCompliance","NexidiaDiscovery","NexidiaEvaluationsAging","NexidiaIngest","NexidiaReplay","NexidiaSearch","NxGridGateway","NxGridControl","NxGridBase","NxGridAgent")
$stopSequence = @("NxGridAgent","NxGridBase","NxGridControl","NxGridGateway","NexidiaSearch","NexidiaReplay","NexidiaIngest","NexidiaEvaluationsAging","NexidiaDiscovery","NexidiaDataCompliance","NexidiaBackgroundWorker","NexidiaConfig")

# Loop through each server in the list
foreach ($server in $servers) {
    # Stop the services in the specified order
    foreach ($service in $stopSequence) {
        Invoke-Command -ComputerName $server -ScriptBlock {            
            Get-Service -Name $using:service | Stop-Service -Force
        }
    }

    # Change the service account and password for the services
    $password = $cred.GetNetworkCredential().Password
    foreach ($service in $services) {
        Invoke-Command -ComputerName $server -ScriptBlock {
            $serviceName = $using:service
            $userName = $using:cred.UserName
            $password = $using:password

            # Change the service account and password
            $act = sc.exe config $serviceName obj= $userName password= $password
            if ($act) {
                Write-Output "$Using:server Service Account Change Succeeded for $serviceName"
            } else {
                Write-Output "$Using:server Service Account Change Failed for $serviceName"
            }
        }
    }

    # Start the services in the specified order
    foreach ($service in $startSequence) {
        Invoke-Command -ComputerName $server -ScriptBlock {
            Get-Service -Name $using:service | Start-Service
        }
    }

    # Loop through each App Pool name
    foreach ($appPoolName in @("MicroStrategyWebPool", "NxIAAgentObserverAppPool", "NxIAAutoDiscoveryAppPool", "NxIAAutoDiscoveryProxyAppPool", "NxIADiscoveryAppPool", "NxIAEvaluationsAppPool", "NxIAEvaluationScorecardsAppPool", "NxIAEvaluationsPortalAppPool", "NxIAKnowledgeBaseAppPool", "NxIAMainAppPool", "NxIAPortalAppPool", "NxIARestApiAppPool", "NxIARootAppPool", "NxIASearchAppPool", "NxIAWebServicesAppPool")) {
        # Get current App Pool user identity
        $appPool = Get-WebAppPoolState -Name $appPoolName
        $currentUsername = $appPool.processModel.userName

        # If current username is not the same as the new username, update it
        if ($currentUsername -ne $cred.UserName) {
            Set-WebConfigurationProperty "/system.applicationHost/applicationPools/add[@name='$appPoolName']/processModel" -Name "userName" -Value $cred.UserName -PSPath "IIS:\"
            Set-WebConfigurationProperty "/system.applicationHost/applicationPools/add[@name='$appPoolName']/processModel" -Name "password" -Value $cred.Password -PSPath "IIS:\"

            Write-Host "Updated App Pool '$appPoolName' to use user '$($cred.UserName)'." -ForegroundColor Green
        }
    }
}


$service_status = Get-Service -Computername $server -Name NexidiaConfig,NexidiaBackgroundWorker,NexidiaDataCompliance,NexidiaDiscovery,NexidiaEvaluationsAging,NexidiaIngest,NexidiaReplay,NexidiaSearch,NxGridGateway,NxGridControl,NxGridBase,NxGridAgent|
Select-Object @{n='ServerTime';e={Get-Date -Format G}},  MachineName,  ServiceName, UserName,  StartType, Status|sort MachineName

$service_in_html= $service_status | ConvertTo-Html -Fragment -PreContent $header -PostContent $footer

$service_colored=@()


foreach($line in $service_in_html)
{
    switch -Regex ($line)
    {
        "<td>Stopped</td>"
        {
        $service_colored += $line -replace "<td>Stopped</td>", "<td class=""Stopped"">Stopped</td>"
        }
        "<td>Running</td>"
        {
        $service_colored += $line -replace "<td>Running</td>", "<td class=""Running"">Running</td>"
        }
        Default
        {
        $service_colored += $line 
        }
    }
}

$service_colored | out-File -FilePath C:\Scripts\ServicesStatusOutput.html